[{"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\index.tsx":"1","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\App.tsx":"3","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\views\\Home.tsx":"4","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\components\\nav\\NavBar.tsx":"5","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\views\\Dashboard.tsx":"6","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\components\\main\\MovieCard.tsx":"7","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\views\\MovieView.tsx":"8","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\interface\\Movie.tsx":"9","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\styleClasses\\ratingColor.tsx":"10"},{"size":604,"mtime":1652096368628,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1651858085174,"results":"13","hashOfConfig":"12"},{"size":731,"mtime":1652096163907,"results":"14","hashOfConfig":"12"},{"size":3319,"mtime":1652105372882,"results":"15","hashOfConfig":"12"},{"size":6615,"mtime":1652047161572,"results":"16","hashOfConfig":"12"},{"size":6617,"mtime":1652103660411,"results":"17","hashOfConfig":"12"},{"size":1987,"mtime":1652098786203,"results":"18","hashOfConfig":"12"},{"size":6374,"mtime":1652100809096,"results":"19","hashOfConfig":"12"},{"size":362,"mtime":1652100697834,"results":"20","hashOfConfig":"12"},{"size":179,"mtime":1652086021777,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"smdc3q",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\index.tsx",[],[],"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\reportWebVitals.ts",[],[],[],"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\App.tsx",["56"],[],"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\views\\Home.tsx",["57","58","59"],[],"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\components\\nav\\NavBar.tsx",[],[],"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\views\\Dashboard.tsx",["60","61","62","63","64","65"],[],"import React, { useState } from 'react'\r\nimport { Genre } from '../interface/Genre';\r\nimport { IDictionary } from '../interface/IDictionary';\r\nimport { Movie } from '../interface/Movie';\r\nimport { Person } from '../interface/Person';\r\ninterface MovieObject {\r\n  [key: string]: any\r\n}\r\nconst classList = {\r\n  \"display\": \"none\"\r\n}\r\nexport function Dashboard() {\r\n  const [formValues, setFormValues] = useState<MovieObject>();\r\n  let modal = <div style={{ \"display\": \"none\" }} id=\"modal\" className=\"flex items-center mx-auto w-1/2 bg-blue-500 text-white text-sm font-bold px-4 py-3 displayModal\" role=\"alert\">\r\n    <svg className=\"fill-current  h-4 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M12.432 0c1.34 0 2.01.912 2.01 1.957 0 1.305-1.164 2.512-2.679 2.512-1.269 0-2.009-.75-1.974-1.99C9.789 1.436 10.67 0 12.432 0zM8.309 20c-1.058 0-1.833-.652-1.093-3.524l1.214-5.092c.211-.814.246-1.141 0-1.141-.317 0-1.689.562-2.502 1.117l-.528-.88c2.572-2.186 5.531-3.467 6.801-3.467 1.057 0 1.233 1.273.705 3.23l-1.391 5.352c-.246.945-.141 1.271.106 1.271.317 0 1.357-.392 2.379-1.207l.6.814C12.098 19.02 9.365 20 8.309 20z\" /></svg>\r\n    <p>Movie has been inserted in the catalogue!</p>\r\n  </div>\r\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    event.preventDefault()\r\n    let values = {\r\n      \"id\": 0,\r\n      \"clickedCounter\": 0,\r\n      \"rating\": 0,\r\n      \"numberOfPeopleWhoRated\": 0,\r\n      \"genres\": null,\r\n      \"people\": null,\r\n      \"imageLinks\": [],\r\n      ...formValues\r\n    };\r\n    values.imageLinks = formValues?.imageLinks.split(\",\")\r\n\r\n    const response = await fetch(\"https://localhost:7121/api/movies/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(values),\r\n    })\r\n      .then(response => {\r\n        modal = <div id=\"modal\" className=\"flex items-center mt-10 mx-auto w-1/2 bg-blue-500 text-white text-sm font-bold px-4 py-3 displayModal\" role=\"alert\">\r\n        <svg className=\"fill-current  h-4 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M12.432 0c1.34 0 2.01.912 2.01 1.957 0 1.305-1.164 2.512-2.679 2.512-1.269 0-2.009-.75-1.974-1.99C9.789 1.436 10.67 0 12.432 0zM8.309 20c-1.058 0-1.833-.652-1.093-3.524l1.214-5.092c.211-.814.246-1.141 0-1.141-.317 0-1.689.562-2.502 1.117l-.528-.88c2.572-2.186 5.531-3.467 6.801-3.467 1.057 0 1.233 1.273.705 3.23l-1.391 5.352c-.246.945-.141 1.271.106 1.271.317 0 1.357-.392 2.379-1.207l.6.814C12.098 19.02 9.365 20 8.309 20z\" /></svg>\r\n        <p>Movie has been inserted in the catalogue!</p>\r\n      </div>\r\n      })\r\n  }\r\n  function handleChange(item: any) {\r\n    let formObj = Object.assign({}, formValues);\r\n    const target = item.currentTarget;\r\n    const index = target.getAttribute(\"name\");\r\n    if (index != null) {\r\n      formObj[index] = target.value\r\n      setFormValues(formObj)\r\n    }\r\n\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit} className=\"w-full max-w-lg mx-auto mt-20\">\r\n        <div className=\"flex flex-wrap -mx-3 mb-6\">\r\n          <div className=\"w-full md:w-1/2 px-3 mb-6 md:mb-0\">\r\n            <label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" htmlFor=\"grid-title\">\r\n              Movie title\r\n            </label>\r\n            <input value={formValues?.title} onChange={handleChange} name=\"title\" className=\"appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white\" id=\"grid-title\" type=\"text\" placeholder=\"Ex. Spiderman\" />\r\n\r\n          </div>\r\n          <div className=\"w-full md:w-1/2 px-3\">\r\n            <label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" htmlFor=\"grid-last-name\">\r\n              Length (in minutes)\r\n            </label>\r\n            <input value={formValues?.length} onChange={handleChange} name=\"length\" className=\"appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-last-name\" type=\"number\" placeholder=\"150\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"flex flex-wrap -mx-3 mb-6\">\r\n          <div className=\"w-full md:w-1/2 px-3 mb-6 md:mb-0\">\r\n            <label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" htmlFor=\"grid-link\">\r\n              IMDB link\r\n            </label>\r\n            <input value={formValues?.imdbLink} onChange={handleChange} name=\"imdbLink\" className=\"appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-link\" type=\"text\" />\r\n          </div>\r\n          <div className=\"w-full md:w-1/2 px-3 mb-6 md:mb-0\">\r\n            <label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" htmlFor=\"grid-zip\">\r\n              Year\r\n            </label>\r\n            <input value={formValues?.year} onChange={handleChange} name=\"year\" className=\"appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-zip\" type=\"number\" placeholder=\"2005\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-full mb-6\">\r\n          <label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" htmlFor=\"grid-link\">\r\n            Image links (separated by a comma)\r\n          </label>\r\n          <input value={formValues?.imageLinks} onChange={handleChange} name=\"imageLinks\" className=\"appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\" id=\"grid-link\" type=\"text\" />\r\n        </div>\r\n        <label htmlFor=\"message\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400\">Summary</label>\r\n        <input value={formValues?.description} onChange={handleChange} name=\"description\" id=\"message\" className=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"Summary\"></input>\r\n        <button type='submit' className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold mt-6 py-2 px-4 rounded\">\r\n          Button\r\n        </button>\r\n      </form>\r\n      {modal}\r\n    </div>\r\n  )\r\n}\r\n",[],"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\components\\main\\MovieCard.tsx",["66"],[],"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\views\\MovieView.tsx",["67","68"],[],"import React, { useEffect, useState } from 'react'\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Genre } from '../interface/Genre';\r\nimport { Movie } from '../interface/Movie';\r\nimport { Person } from '../interface/Person';\r\nimport { ratingColor } from '../styleClasses/ratingColor';\r\ninterface RolesObject {\r\n  [key: string]: Array<string>\r\n}\r\n\r\n\r\nexport function MovieView() {\r\n  const [movie, setMovie] = useState<Movie>();\r\n  const [people, setPeople] = useState<RolesObject>({ \"Actors\": [], \"Directors\": [], \"Producers\": [] });\r\n  let { id } = useParams();\r\n  function transformPerson(person: Person) {\r\n    let peopleObj = Object.assign({}, people);\r\n    person.rolesList.forEach((item: string) => {\r\n      const key = item + \"s\";\r\n      peopleObj[key].push(person.firstName + \" \" + person.lastName + \"_\" + person.id)\r\n    })\r\n    console.log(peopleObj)\r\n    setPeople(peopleObj)\r\n  }\r\n  useEffect(() => {\r\n    fetch(\"https://localhost:7121/api/movies/\" + id, {\r\n      method: \"GET\"\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setMovie(data);\r\n        data.people.forEach((element: Person) => {\r\n          transformPerson(element)\r\n        });\r\n      })\r\n    fetch(\"https://localhost:7121/api/stats/\" + id, {\r\n      method: \"POST\"\r\n    })\r\n  }, [])\r\n  const carouselItems = movie?.imageLinks.map((item, index) =>\r\n    <div key={index} className=\"duration-700 ease-in-out absolute inset-0 transition-all transform translate-x-0 z-20\" data-carousel-item=\"\">\r\n      <span className=\"absolute top-1/2 left-1/2 text-2xl font-semibold text-white -translate-x-1/2 -translate-y-1/2 sm:text-3xl dark:text-gray-800\"></span>\r\n      <img src={item} className=\"block absolute top-1/2 left-1/2 w-full -translate-x-1/2 -translate-y-1/2\" alt=\"...\" />\r\n    </div>\r\n  )\r\n  const genreItems = movie?.genres.map((genre, index) =>\r\n    <span key={index} className=\"bg-gray-100 text-gray-800 text-sm font-medium px-2.5 py-0.5 mx-2 rounded dark:bg-gray-700 dark:text-gray-300\">{genre.category}</span>\r\n  )\r\n\r\n  const crew = Object.keys(people).map((item, index) =>\r\n    <div key={index}><span className='text-2xl'>{item}</span> <div className='flex border-t my-4'>{people[item].map((item, index) => {\r\n      const items = item.split(\"_\");\r\n      const fullName = items[0];\r\n      const id = items[1]\r\n      return <Link\r\n        to={\"/people/\" + id}\r\n        key={index}\r\n        className=\"\r\npx-6\r\npy-2\r\nxl:w-full\r\nrounded-t-lg\r\ntext-blue-600\r\ncursor-pointer\r\n\"\r\n      >\r\n        <span key={index}>{fullName}</span>\r\n      </Link>\r\n\r\n    })}</div></div>\r\n  )\r\n  return (\r\n    <div className=\"container mx-auto mt-10\">\r\n      <div className=\"max-w-l bg-white rounded-lg shadow-md dark:bg-gray-800 dark:border-gray-700\">\r\n\r\n\r\n        <div id=\"default-carousel\" className=\"relative\" data-carousel=\"static\">\r\n\r\n          <div className=\"overflow-hidden relative h-56 rounded-lg sm:h-64 xl:h-80 2xl:h-96\">\r\n            {carouselItems}\r\n          </div>\r\n\r\n          <div className=\"flex absolute bottom-5 left-1/2 z-30 space-x-3 -translate-x-1/2\">\r\n            {movie?.imageLinks.map((item, index) =>\r\n              <button key={index} type=\"button\" className=\"w-3 h-3 rounded-full bg-white dark:bg-gray-800\" aria-current=\"true\" aria-label={\"Slide \" + index + 1} data-carousel-slide-to={index}></button>\r\n            )}\r\n\r\n\r\n          </div>\r\n\r\n          <button type=\"button\" className=\"flex absolute top-0 left-0 z-30 justify-center items-center px-4 h-full cursor-pointer group focus:outline-none\" data-carousel-prev=\"\">\r\n            <span className=\"inline-flex justify-center items-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none\">\r\n              <svg className=\"w-5 h-5 text-white sm:w-6 sm:h-6 dark:text-gray-800\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 19l-7-7 7-7\"></path></svg>\r\n              <span className=\"hidden\">Previous</span>\r\n            </span>\r\n          </button>\r\n          <button type=\"button\" className=\"flex absolute top-0 right-0 z-30 justify-center items-center px-4 h-full cursor-pointer group focus:outline-none\" data-carousel-next=\"\">\r\n            <span className=\"inline-flex justify-center items-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none\">\r\n              <svg className=\"w-5 h-5 text-white sm:w-6 sm:h-6 dark:text-gray-800\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5l7 7-7 7\"></path></svg>\r\n              <span className=\"hidden\">Next</span>\r\n            </span>\r\n          </button>\r\n        </div>\r\n\r\n\r\n        <div className=\"px-5 pb-5 mt-5\">\r\n          <div className='flex justify-between'>\r\n            <h2 className=\"text-3xl font-semibold tracking-tight text-gray-900 dark:text-white\">{movie?.title} ({movie?.year})</h2>\r\n            <h5 className='text-1xl font-semibold tracking-tight text-gray-900 dark:text-white'>Viewed {movie?.clickedCounter} times</h5>\r\n          </div>\r\n\r\n          <div className=\"flex justify-between items-center my-5\">\r\n            <span className=\"font-bold text-gray-900 dark:text-white\">Length: {movie?.length} min</span>\r\n            <div className=\"flex items-center\">\r\n              <span className='px-5 font-bold'>User Score</span> <p className=\"text-lg font-semibold inline-flex items-center px-2 py-1 rounded\" style={ratingColor(movie?.rating)} >{movie?.rating}</p>\r\n            </div>\r\n          </div>\r\n          <p>{movie?.description}</p>\r\n          <div className='my-5 flex justify-between'>\r\n            <div>{genreItems}</div>\r\n            <a href={movie?.imdbLink ? movie.imdbLink : \"\"} className=\"text-blue-600\">IMDB</a>\r\n          </div>\r\n          <div>\r\n            <div className=\"flex justify-center flex-col\">\r\n\r\n              {crew}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}","C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\interface\\Movie.tsx",[],[],"C:\\Users\\Simon\\RiderProjects\\MovieApp\\FrontEnd\\my-app\\src\\styleClasses\\ratingColor.tsx",["69"],[],{"ruleId":"70","severity":1,"message":"71","line":6,"column":10,"nodeType":"72","messageId":"73","endLine":6,"endColumn":14},{"ruleId":"70","severity":1,"message":"74","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":28},{"ruleId":"70","severity":1,"message":"71","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":14},{"ruleId":"70","severity":1,"message":"75","line":21,"column":13,"nodeType":"72","messageId":"73","endLine":21,"endColumn":21},{"ruleId":"70","severity":1,"message":"76","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":15},{"ruleId":"70","severity":1,"message":"77","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":21},{"ruleId":"70","severity":1,"message":"78","line":4,"column":10,"nodeType":"72","messageId":"73","endLine":4,"endColumn":15},{"ruleId":"70","severity":1,"message":"79","line":5,"column":10,"nodeType":"72","messageId":"73","endLine":5,"endColumn":16},{"ruleId":"70","severity":1,"message":"80","line":9,"column":7,"nodeType":"72","messageId":"73","endLine":9,"endColumn":16},{"ruleId":"70","severity":1,"message":"81","line":32,"column":11,"nodeType":"72","messageId":"73","endLine":32,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":16,"column":21,"nodeType":"84","endLine":16,"endColumn":95},{"ruleId":"70","severity":1,"message":"76","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":15},{"ruleId":"85","severity":1,"message":"86","line":39,"column":6,"nodeType":"87","endLine":39,"endColumn":8,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":15,"nodeType":"91","messageId":"92","endLine":2,"endColumn":17},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'movieObj' is assigned a value but never used.","'Genre' is defined but never used.","'IDictionary' is defined but never used.","'Movie' is defined but never used.","'Person' is defined but never used.","'classList' is assigned a value but never used.","'response' is assigned a value but never used.","jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'transformPerson'. Either include them or remove the dependency array.","ArrayExpression",["93"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",{"desc":"94","fix":"95"},"Update the dependencies array to be: [id, transformPerson]",{"range":"96","text":"97"},[1306,1308],"[id, transformPerson]"]